[tool.poetry]
name = "cellophane"
version = "0.1.0"
description = "A library for wrapping APIs I use. "
authors = ["thatsmidnight <10793854+thatsmidnight@users.noreply.github.com>"]
license = "CC0-1.0"
readme = "README.md"

[tool.poetry.dependencies]
python = "~3.12"

[tool.poetry.group.dev.dependencies]
pylint = "^3.3.1"
black = "^24.10.0"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
isort = "^5.13.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 78
target-version = ['py312']
skip-string-normalization = false
preview = true

[tool.isort]
profile = "black"
py_version = 312
line_length = 79
wrap_length = 78
only_sections = true
import_heading_stdlib = "Standard Library"
import_heading_future = "Future"
import_heading_firstparty = "First-Party"
import_heading_thirdparty = "Third-Party"
import_heading_localfolder = "Local Folder"
known_localfolder = "models,services,utils"
multi_line_output = 5
virtual_env = ".venv"
include_trailing_comma = true
use_parentheses = true
group_by_package = true
combine_straight_imports = false
combine_as_imports = true

[tool.coverage.run]
branch = true
source = ["models", "services", "utils", "app.py"]
omit = [
    "tests/*",
    "utils/enums.py"
]

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
